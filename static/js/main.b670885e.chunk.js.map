{"version":3,"sources":["hooks/useInputState.js","Editform.js","hooks/useToogleState.js","GroceryItem.js","GroceryList.js","ListForm.js","GroceryApp.js","App.js","serviceWorker.js","index.js"],"names":["initialVal","useState","value","setValue","e","target","EditForm","editGrocery","id","task","toogleEditForm","useInputState","handleChange","reset","onSubmit","preventDefault","style","margin","width","TextField","onChange","fullWidth","autoFocus","useToogle","state","setState","toogle","GroceryItem","completed","removeGrocery","toogleGrocery","useToogleState","isEditing","ListItem","height","tabIndex","checked","onClick","ListItemText","textDecoration","ListItemSecondaryAction","IconButton","aria-label","GroceryList","grocery","length","Paper","List","map","list","i","key","Divider","ListForm","addGrocery","padding","label","GroceryApp","initialGrocery","JSON","parse","window","localStorage","getItem","setGrocery","useEffect","setItem","stringify","marggin","background","elevation","AppBar","color","position","Toolbar","Typography","Grid","container","justify","marginTop","item","xs","md","lg","newGroceryText","uuid","compoleted","groceryId","updatedGroceries","filter","newTask","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b670885e.chunk.js","sourcesContent":["import { useState } from 'react';\nexport default initialVal => {\n    const [value, setValue] = useState(initialVal);\n    const handleChange = e => {\n        setValue(e.target.value);\n    }\n    const reset = () => {\n        setValue(\"\");\n    }\n    return [value, handleChange, reset];\n};","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport useInputState from './hooks/useInputState';\n\nfunction EditForm({ editGrocery, id, task, toogleEditForm }){\n    const [value, handleChange, reset] = useInputState(task)\n    return (\n        <form onSubmit={e => {\n            e.preventDefault();\n            editGrocery(id, value);\n            reset();\n            toogleEditForm();\n        }}\n        style={{margin:\"1rem 0\", width:\"100%\"}}\n        >\n        <TextField margin=\"normal\" value={value} onChange={handleChange} fullWidth autoFocus/>\n        </form>\n    );\n}\n\nexport default EditForm;","import { useState } from 'react';\n\nfunction useToogle(initialVal= false){\n    const [state, setState] = useState(initialVal);\n    const toogle = () => {\n        setState(!state);\n    };\n    return [state, toogle]; \n}\nexport default useToogle;","import React from 'react';\nimport EditForm from './Editform';\nimport useToogleState from './hooks/useToogleState';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport CheckBox from '@material-ui/core/Checkbox';\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport EditIcon from '@material-ui/icons/Edit'\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\n\nfunction GroceryItem({ task, completed, removeGrocery, id, toogleGrocery, editGrocery }){\n    const [isEditing, toogle] = useToogleState(false);\n    return (\n        <ListItem style={{height:\"64px\"}}>\n            {isEditing ? <EditForm  editGrocery={editGrocery} id={id} task={task} toogleEditForm={toogle} /> :\n            (<>\n                <CheckBox tabIndex={-1} checked={completed} onClick={() => toogleGrocery(id)} />\n                <ListItemText style={{ textDecoration: completed ? \"line-through\" : \"none\"}}> \n                    {task}\n                </ListItemText>\n                <ListItemSecondaryAction>\n                    <IconButton aria-label=\"Edit\" onClick={toogle}>\n                        <EditIcon />\n                    </IconButton>\n                    <IconButton aria-label=\"Delete\" onClick={() => removeGrocery(id)}>\n                        <DeleteIcon />\n                    </IconButton>\n                </ListItemSecondaryAction>\n            </>)\n            }\n        </ListItem>\n    );\n}\n\nexport default GroceryItem;","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\n\nimport GroceryItem from './GroceryItem';\n\nfunction GroceryList({ grocery, removeGrocery, toogleGrocery, editGrocery }){\n    if(grocery.length){\n        return(\n        <Paper>\n            <List>\n            {grocery.map((list, i) => (\n                <>\n                <GroceryItem \n                    id={list.id} \n                    task={list.task} \n                    key={list.id} \n                    completed={list.completed} \n                    removeGrocery={removeGrocery} \n                    toogleGrocery={toogleGrocery} \n                    editGrocery={editGrocery}   \n                    />\n                { i < grocery.length -1 && <Divider/>}\n                </>\n            ))}\n            </List>\n        </Paper>\n    );\n    }\n    return null;\n}\n\nexport default GroceryList;","import React from 'react';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport useInputState from './hooks/useInputState';\n\nfunction ListForm({ addGrocery }){\n    const [value, handleChange, reset] = useInputState(\"\");\n\n    return (\n        <Paper style={{margin: '1rem 0', padding: '0 1rem'}}>\n            <form onSubmit={e => {\n                e.preventDefault();\n                addGrocery(value);\n                reset()\n            }}>\n                <TextField value={value} onChange={handleChange} margin='normal' label='Add New Grocery Item' fullWidth />\n            </form>\n        </Paper>\n    );\n}\n\nexport default ListForm;","import React, { useState, useEffect } from 'react';\nimport GroceryList from './GroceryList';\nimport ListForm from './ListForm';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport uuid from 'uuid/dist/v4';\n\nfunction GroceryApp() {\n    const initialGrocery = JSON.parse(window.localStorage.getItem('groceries') || \"[]\");\n    const [grocery, setGrocery] = useState(initialGrocery);\n    useEffect(() => {\n        window.localStorage.setItem(\"groceries\", JSON.stringify(grocery))\n    }, [grocery]);\n\n    const addGrocery = newGroceryText => {\n        setGrocery([...grocery, {id: uuid(), task: newGroceryText, compoleted: false }]);\n    }\n    const removeGrocery = groceryId => {\n        const updatedGroceries = grocery.filter(item => item.id !== groceryId);\n        setGrocery(updatedGroceries);\n    }\n    const toogleGrocery = groceryId => {\n        const updatedGroceries = grocery.map( item => \n            item.id === groceryId ? { ...item, completed: !item.completed } : item    \n        );\n        setGrocery(updatedGroceries);\n    }\n    const editGrocery = (groceryId, newTask) => {\n        const updatedGroceries = grocery.map( item =>\n            item.id === groceryId ? { ...item, task: newTask } : item    \n        );\n        setGrocery(updatedGroceries);\n    }   \n\n    return (\n        <Paper style={{\n            padding: 0,\n            marggin: 0,\n            height: \"100vh\",\n            background: \"#fafafa\"\n            }} \n            elevation={0}\n        >\n            <AppBar color='secondary' position='static' style={{ height: \"64px\" }}>\n                <Toolbar>\n                    <Typography color='inherit'>Grocery List With Hooks</Typography>\n                </Toolbar>\n            </AppBar>\n            <Grid container justify='center' style={{marginTop: '1rem'}}>\n                <Grid item xs={11} md={8} lg={4}>\n                    <ListForm addGrocery={addGrocery}/>\n                    <GroceryList \n                        grocery={grocery} \n                        removeGrocery={removeGrocery}\n                        toogleGrocery={toogleGrocery} \n                        editGrocery={editGrocery}   \n                    />\n                </Grid>\n            </Grid>\n        </Paper>\n    );\n}\n\nexport default GroceryApp;","import React from 'react';\nimport GroceryApp from './GroceryApp';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <GroceryApp />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}